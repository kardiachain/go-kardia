// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package genesis

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/kardiachain/go-kardia/configs"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/proto/kardiachain/types"
	types0 "github.com/kardiachain/go-kardia/types"
)

var _ = (*genesisSpecMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		ChainID              string                                      `json:"chain_id"`
		InitialHeight        uint64                                      `json:"initial_height"`
		Config               *configs.ChainConfig                        `json:"config"`
		Timestamp            time.Time                                   `json:"timestamp"`
		GasLimit             uint64                                      `json:"gasLimit"   gencodec:"required"`
		Alloc                map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		KardiaSmartContracts []*types0.KardiaSmartcontract               `json:"kardiaSmartContracts"`
		Validators           []*GenesisValidator                         `json:"validators"`
		ConsensusParams      *types.ConsensusParams                      `json:"consensus_params,omitempty"`
		Consensus            *configs.ConsensusConfig                    `json:"consensusConfig"`
	}
	var enc Genesis
	enc.ChainID = g.ChainID
	enc.InitialHeight = g.InitialHeight
	enc.Config = g.Config
	enc.Timestamp = g.Timestamp
	enc.GasLimit = g.GasLimit
	if g.Alloc != nil {
		enc.Alloc = make(map[common.UnprefixedAddress]GenesisAccount, len(g.Alloc))
		for k, v := range g.Alloc {
			enc.Alloc[common.UnprefixedAddress(k)] = v
		}
	}
	enc.KardiaSmartContracts = g.KardiaSmartContracts
	enc.Validators = g.Validators
	enc.ConsensusParams = g.ConsensusParams
	enc.Consensus = g.Consensus
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		ChainID              *string                                     `json:"chain_id"`
		InitialHeight        *uint64                                     `json:"initial_height"`
		Config               *configs.ChainConfig                        `json:"config"`
		Timestamp            *time.Time                                  `json:"timestamp"`
		GasLimit             *uint64                                     `json:"gasLimit"   gencodec:"required"`
		Alloc                map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		KardiaSmartContracts []*types0.KardiaSmartcontract               `json:"kardiaSmartContracts"`
		Validators           []*GenesisValidator                         `json:"validators"`
		ConsensusParams      *types.ConsensusParams                      `json:"consensus_params,omitempty"`
		Consensus            *configs.ConsensusConfig                    `json:"consensusConfig"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID != nil {
		g.ChainID = *dec.ChainID
	}
	if dec.InitialHeight != nil {
		g.InitialHeight = *dec.InitialHeight
	}
	if dec.Config != nil {
		g.Config = dec.Config
	}
	if dec.Timestamp != nil {
		g.Timestamp = *dec.Timestamp
	}
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Genesis")
	}
	g.GasLimit = *dec.GasLimit
	if dec.Alloc == nil {
		return errors.New("missing required field 'alloc' for Genesis")
	}
	g.Alloc = make(GenesisAlloc, len(dec.Alloc))
	for k, v := range dec.Alloc {
		g.Alloc[common.Address(k)] = v
	}
	if dec.KardiaSmartContracts != nil {
		g.KardiaSmartContracts = dec.KardiaSmartContracts
	}
	if dec.Validators != nil {
		g.Validators = dec.Validators
	}
	if dec.ConsensusParams != nil {
		g.ConsensusParams = dec.ConsensusParams
	}
	if dec.Consensus != nil {
		g.Consensus = dec.Consensus
	}
	return nil
}
