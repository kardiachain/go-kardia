// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/kardiachain/go-kardia/lib/common"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		Height             uint64         `json:"height"       gencodec:"required"`
		Time               time.Time      `json:"time"         gencodec:"required"`
		NumTxs             uint64         `json:"numTxs"      gencodec:"required"`
		GasLimit           uint64         `json:"gasLimit"         gencodec:"required"`
		LastBlockID        BlockID        `json:"lastBlockID"`
		ProposerAddress    common.Address `json:"proposerAddress"            gencodec:"required"`
		LastCommitHash     common.Hash    `json:"commitHash"    gencodec:"required"`
		TxHash             common.Hash    `json:"dataHash"           gencodec:"required"`
		ValidatorsHash     common.Hash    `json:"validatorHash"`
		NextValidatorsHash common.Hash    `json:"nextValidatorHash"`
		ConsensusHash      common.Hash    `json:"consensusHash"`
		AppHash            common.Hash    `json:"appHash"`
		EvidenceHash       common.Hash    `json:"evidenceHash"`
		Hash               common.Hash    `json:"hash"`
	}
	var enc Header
	enc.Height = h.Height
	enc.Time = h.Time
	enc.NumTxs = h.NumTxs
	enc.GasLimit = h.GasLimit
	enc.LastBlockID = h.LastBlockID
	enc.ProposerAddress = h.ProposerAddress
	enc.LastCommitHash = h.LastCommitHash
	enc.TxHash = h.TxHash
	enc.ValidatorsHash = h.ValidatorsHash
	enc.NextValidatorsHash = h.NextValidatorsHash
	enc.ConsensusHash = h.ConsensusHash
	enc.AppHash = h.AppHash
	enc.EvidenceHash = h.EvidenceHash
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		Height             *uint64         `json:"height"       gencodec:"required"`
		Time               *time.Time      `json:"time"         gencodec:"required"`
		NumTxs             *uint64         `json:"numTxs"      gencodec:"required"`
		GasLimit           *uint64         `json:"gasLimit"         gencodec:"required"`
		LastBlockID        *BlockID        `json:"lastBlockID"`
		ProposerAddress    *common.Address `json:"proposerAddress"            gencodec:"required"`
		LastCommitHash     *common.Hash    `json:"commitHash"    gencodec:"required"`
		TxHash             *common.Hash    `json:"dataHash"           gencodec:"required"`
		ValidatorsHash     *common.Hash    `json:"validatorHash"`
		NextValidatorsHash *common.Hash    `json:"nextValidatorHash"`
		ConsensusHash      *common.Hash    `json:"consensusHash"`
		AppHash            *common.Hash    `json:"appHash"`
		EvidenceHash       *common.Hash    `json:"evidenceHash"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Height == nil {
		return errors.New("missing required field 'height' for Header")
	}
	h.Height = *dec.Height
	if dec.Time == nil {
		return errors.New("missing required field 'time' for Header")
	}
	h.Time = *dec.Time
	if dec.NumTxs == nil {
		return errors.New("missing required field 'numTxs' for Header")
	}
	h.NumTxs = *dec.NumTxs
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = *dec.GasLimit
	if dec.LastBlockID != nil {
		h.LastBlockID = *dec.LastBlockID
	}
	if dec.ProposerAddress == nil {
		return errors.New("missing required field 'proposerAddress' for Header")
	}
	h.ProposerAddress = *dec.ProposerAddress
	if dec.LastCommitHash == nil {
		return errors.New("missing required field 'commitHash' for Header")
	}
	h.LastCommitHash = *dec.LastCommitHash
	if dec.TxHash == nil {
		return errors.New("missing required field 'dataHash' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ValidatorsHash != nil {
		h.ValidatorsHash = *dec.ValidatorsHash
	}
	if dec.NextValidatorsHash != nil {
		h.NextValidatorsHash = *dec.NextValidatorsHash
	}
	if dec.ConsensusHash != nil {
		h.ConsensusHash = *dec.ConsensusHash
	}
	if dec.AppHash != nil {
		h.AppHash = *dec.AppHash
	}
	if dec.EvidenceHash != nil {
		h.EvidenceHash = *dec.EvidenceHash
	}
	return nil
}
