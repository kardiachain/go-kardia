/*
 *  Copyright 2019 KardiaChain
 *  This file is part of the go-kardia library.
 *
 *  The go-kardia library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The go-kardia library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with the go-kardia library. If not, see <http://www.gnu.org/licenses/>.
 */

package sample_kvm

import (
	"math/big"
	"strings"
	"testing"

	// "github.com/kardiachain/go-kardia/kai/kaidb/memorydb"

	"github.com/kardiachain/go-kardia/kai/kaidb/memorydb"
	"github.com/kardiachain/go-kardia/kai/state"
	"github.com/kardiachain/go-kardia/kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
)

func TestDefaults(t *testing.T) {
	cfg := new(Config)
	setDefaults(cfg)

	if cfg.Time == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GasLimit == 0 {
		t.Error("didn't expect gaslimit to be zero")
	}
	if cfg.GasPrice == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.Value == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GetHashFn == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.BlockHeight != 0 {
		t.Error("expected block height to be 0")
	}
}

func TestKVM(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("crashed with: %v", r)
		}
	}()

	Execute([]byte{
		byte(kvm.TIMESTAMP),
		byte(kvm.GASLIMIT),
		byte(kvm.PUSH1),
		byte(kvm.ORIGIN),
		byte(kvm.BLOCKHASH),
		byte(kvm.COINBASE),
	}, nil, nil)
}

func TestExecute(t *testing.T) {
	ret, _, err := Execute([]byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	}, nil, nil)
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func TestCall(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, []byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	})

	ret, _, err := Call(address, nil, &Config{State: state})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

// Simple counter smart contract to be used for below tests:
/*
- counter.sol:
	pragma solidity ^0.4.24;
	contract Counter {
    	uint8 count;
    	function set(uint8 x) public {
        	count = x;
    	}
    	function get() public view returns (uint8) {
        	return count;
    	}
	}

- compiler: remix: 0.4.24+commit.e67f0147.Emscripten.clang
*/

// Test creating a simple smart contract on KVM.
// Note: Create uses the raw bytecode as generated from compiler
func TestCreateSimpleCounterSmc(t *testing.T) {
	// Add bytecode for counter.sol to create the smc:
	var input = common.Hex2Bytes("608060405234801561001057600080fd5b5060da8061001f6000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324b8ba5f8114604d5780636d4ce63c146067575b600080fd5b348015605857600080fd5b50606560ff60043516608f565b005b348015607257600080fd5b50607960a5565b6040805160ff9092168252519081900360200190f35b6000805460ff191660ff92909216919091179055565b60005460ff16905600a165627a7a723058206cc1a54f543612d04d3f16b0bbb49e9ded9ccf6d47f7789fe3577260346ed44d0029")
	_, _, _, err := Create(input, nil)
	if err != nil {
		t.Fatal(err)
	}
}

// Test executing the counter smart contract on KVM
// Note: Call uses the runtime_bytecode from the compiler, unlike the raw bytecode as in the previous unit test
func TestCallSimpleCounterSmc(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	address := common.HexToAddress("0x0a")

	// Add runtime_bytecode for counter.sol to execute the smc:
	var code = common.Hex2Bytes("60806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324b8ba5f8114604d5780636d4ce63c146067575b600080fd5b348015605857600080fd5b50606560ff60043516608f565b005b348015607257600080fd5b50607960a5565b6040805160ff9092168252519081900360200190f35b6000805460ff191660ff92909216919091179055565b60005460ff16905600a165627a7a723058206cc1a54f543612d04d3f16b0bbb49e9ded9ccf6d47f7789fe3577260346ed44d0029")
	state.SetCode(address, code)
	var definition = `[
		{"constant":false,"inputs":[{"name":"x","type":"uint8"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},
		{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
	]`

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	// Sets counter to 5
	set, err := abi.Pack("set", uint8(5))
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = Call(address, set, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	// Gets counter and verifies it is 5
	get, err := abi.Pack("get")
	if err != nil {
		t.Fatal(err)
	}
	result, _, err := Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num := new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(5)) != 0 {
		t.Error("Expected 5, got", num)
	}
}

func TestChangeBalance(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	var address = common.HexToAddress("0x0b")
	state.CreateAccount(address)
	state.AddBalance(address, big.NewInt(500))

	var balance = state.GetBalance(address)
	if balance.Cmp(big.NewInt(500)) != 0 {
		t.Error("error setting balance, expect 500, got", balance)
	}

	state.SubBalance(address, big.NewInt(100))
	balance = state.GetBalance(address)
	if balance.Cmp(big.NewInt(400)) != 0 {
		t.Error("error subtract balance, expect 400, got", balance)
	}
}

func TestCallSmcDeductBalance(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	var sender = common.HexToAddress("0x0b")
	state.CreateAccount(sender)
	state.AddBalance(sender, big.NewInt(500))

	address := common.HexToAddress("0x0a")

	state.SetCode(address, []byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	})
	ret, _, err := Call(address, nil, &Config{State: state, Origin: sender, Value: big.NewInt(50)})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
	var sender_balance = state.GetBalance(sender)
	if sender_balance.Cmp(big.NewInt(450)) != 0 {
		t.Error("Invalid remaining balance, expect 450, got", sender_balance)
	}
	var contract_balance = state.GetBalance(address)
	if contract_balance.Cmp(big.NewInt(50)) != 0 {
		t.Error("Invalid contract balance, expect 50, got", contract_balance)
	}
}

// This test contains all the test cases for interfaces of the decentralized exchange contract
// Please find the solidity source code at go-kardia/kvm/smc/Exchange.sol
func TestDecentralizedExchangeContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))

	address := common.HexToAddress("0x0a")

	var code = common.Hex2Bytes("")
	state.SetCode(address, code)
	var definition = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getAvailableAmountByPair",
		"outputs": [
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getMatchableAmount",
		"outputs": [
			{
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "requestID",
				"type": "uint256"
			}
		],
		"name": "getUncompletedMatchingRequest",
		"outputs": [
			{
				"name": "matchedRequestID",
				"type": "uint256"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getRatePublic",
		"outputs": [
			{
				"name": "sale",
				"type": "uint256"
			},
			{
				"name": "receive",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "saleAmount",
				"type": "uint256"
			},
			{
				"name": "receiveAmount",
				"type": "uint256"
			}
		],
		"name": "addRate",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "requestID",
				"type": "uint256"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "completeRequest",
		"outputs": [
			{
				"name": "success",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "sourcePair",
				"type": "string"
			},
			{
				"name": "interestedPair",
				"type": "string"
			},
			{
				"name": "fromAddress",
				"type": "string"
			},
			{
				"name": "toAddress",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "getMatchingRequestInfo",
		"outputs": [
			{
				"name": "matchedRequestID",
				"type": "uint256"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "srcPair",
				"type": "string"
			},
			{
				"name": "destPair",
				"type": "string"
			},
			{
				"name": "srcAddress",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "matchRequest",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "pair",
				"type": "string"
			},
			{
				"indexed": true,
				"name": "addr",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "matchRequestId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "Release",
		"type": "event"
	}
]`
	abi, err := abi.JSON(strings.NewReader(definition))
	var gas uint64

	if err != nil {
		t.Fatal(err)
	}

	// Try to get non-set rate
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	rateResult, _, errCallRate := Call(address, getRateInput, &Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}
	err = abi.UnpackIntoInterface(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(0)) != 0 || rateStruct.Receive.Cmp(big.NewInt(0)) != 0 {
		t.Error("Error get value, expected 0, 0 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := Call(address, setRateInput, &Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	var decodeInput struct {
		Pair          string
		SaleAmount    *big.Int
		ReceiveAmount *big.Int
	}
	e := abi.UnpackIntoInterface(&decodeInput, "addRate", setRateInput[4:])
	if e != nil {
		t.Fatal(e)
	}
	rateResult, _, errCallRate = Call(address, getRateInput, &Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	// Call get rate for ETH-NEO again to check if we set it correctly
	err = abi.UnpackIntoInterface(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e2 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, gas, e3 = Call(address, setRateInput2, &Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}

	// Find available amount for NEO-ETH now, should be 0
	getAvailableInput, _ := abi.Pack("getAvailableAmountByPair", "NEO-ETH")
	availableResult, _, err := Call(address, getAvailableInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(0)) != 0 {
		t.Fatal("Expect available input is 0, got", big.NewInt(0).SetBytes(availableResult).String())
	}
	// Get rate for NEO-ETH
	getRateInput2, e4 := abi.Pack("getRatePublic", "NEO-ETH")
	if e4 != nil {
		t.Fatal(e4)
	}
	rateResult, _, errCallRate = Call(address, getRateInput2, &Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	err = abi.UnpackIntoInterface(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}

	if rateStruct.Sale.Cmp(big.NewInt(10)) != 0 || rateStruct.Receive.Cmp(big.NewInt(1)) != 0 {
		t.Error("Error get value, expected 10, 1 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Start matching 1 eth for 10 neo
	matchInput1, e5 := abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 := Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for recently added order
	getMatchingInput1, e5 := abi.Pack("getMatchingRequestInfo", "ETH-NEO", "ETH-NEO", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, gas, e6 := Call(address, getMatchingInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var decodedMatchResult struct {
		MatchedRequestID *big.Int `abi:"matchedRequestID"`
		DestAddress      string   `abi:"destAddress"`
		SendAmount       *big.Int `abi:"sendAmount"`
	}
	unpackErr := abi.UnpackIntoInterface(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect id 0, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "" {
		t.Error("Expect address '', got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect send amount 0, got ", decodedMatchResult.SendAmount.String())
	}

	getAvailableInput, _ = abi.Pack("getAvailableAmountByPair", "ETH-NEO")
	availableResult, _, err = Call(address, getAvailableInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(10)) != 0 {
		t.Fatal("Expect available input is 10, got", big.NewInt(0).SetBytes(availableResult).String())
	}

	// Match request sell 10 NEO for 1 ETH
	matchInput2, e5 := abi.Pack("matchRequest", "NEO-ETH", "ETH-NEO", "neosender2", "ethReceiver2", big.NewInt(10))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, _, e6 = Call(address, matchInput2, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for 1st added order
	// now should return info of 2nd order
	getMatchingInput1, e5 = abi.Pack("getMatchingRequestInfo", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = Call(address, getMatchingInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.UnpackIntoInterface(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect id 2, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "ethReceiver2" {
		t.Error("Expect address ethReceiver2, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect send amount 1, got ", decodedMatchResult.SendAmount.String())
	}

	// GetMatching of NEO-ETH matching from NEO side (2nd order)
	// now should return info of 2nd order itself, because it's matched
	getMatchingInput2, e5 := abi.Pack("getMatchingRequestInfo", "NEO-ETH", "NEO-ETH", "neosender2", "ethReceiver2", big.NewInt(10))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = Call(address, getMatchingInput2, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.UnpackIntoInterface(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect id 2, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "ethReceiver2" {
		t.Error("Expect address ethReceiver2, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect send amount 1, got ", decodedMatchResult.SendAmount.String())
	}

	// complete order 1
	completeInput1, e7 := abi.Pack("completeRequest", big.NewInt(1), "ETH-NEO")
	if e7 != nil {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 := Call(address, completeInput1, &Config{State: state})
	if e8 != nil {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}

	// complete order 2
	completeInput1, e7 = abi.Pack("completeRequest", big.NewInt(2), "NEO-ETH")
	if e7 != nil {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 = Call(address, completeInput1, &Config{State: state})
	if e8 != nil {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}

	// Match 2 eth for 20 neo
	matchInput1, e5 = abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(2))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var matchableAmounts struct {
		Amounts []*big.Int `abi:"amounts"`
	}
	// get matchable amount for NEO, should be 20 NEO
	getMatchAmountsInput, _ := abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 := Call(address, getMatchAmountsInput, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.UnpackIntoInterface(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect 1st matchable amount to be 1, got ", matchableAmounts.Amounts[0].String())
	}

	// Match 3 other eth for 30 neo
	matchInput1, e5 = abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(3))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6, gas)
	}

	getMatchAmountsInput, _ = abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 = Call(address, getMatchAmountsInput, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.UnpackIntoInterface(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect 1st matchable amount to be 20, got ", matchableAmounts.Amounts[0].String())
	}
	if matchableAmounts.Amounts[1].Cmp(big.NewInt(30)) != 0 {
		t.Error("Expect 2nd matchable amount to be 20, got ", matchableAmounts.Amounts[0].String())
	}
	if matchableAmounts.Amounts[2].Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect 3rd matchable amount to be 0, got ", matchableAmounts.Amounts[0].String())
	}
}

func BenchmarkCall(b *testing.B) {
	var definition = `[{"constant":true,"inputs":[],"name":"seller","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"abort","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"refund","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"buyer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmReceived","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmPurchase","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[],"name":"Aborted","type":"event"},{"anonymous":false,"inputs":[],"name":"PurchaseConfirmed","type":"event"},{"anonymous":false,"inputs":[],"name":"ItemReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"Refunded","type":"event"}]`

	var code = common.Hex2Bytes("6060604052361561006c5760e060020a600035046308551a53811461007457806335a063b4146100865780633fa4f245146100a6578063590e1ae3146100af5780637150d8ae146100cf57806373fac6f0146100e1578063c19d93fb146100fe578063d696069714610112575b610131610002565b610133600154600160a060020a031681565b610131600154600160a060020a0390811633919091161461015057610002565b61014660005481565b610131600154600160a060020a039081163391909116146102d557610002565b610133600254600160a060020a031681565b610131600254600160a060020a0333811691161461023757610002565b61014660025460ff60a060020a9091041681565b61013160025460009060ff60a060020a9091041681146101cc57610002565b005b600160a060020a03166060908152602090f35b6060908152602090f35b60025460009060a060020a900460ff16811461016b57610002565b600154600160a060020a03908116908290301631606082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf9250a150565b80546002023414806101dd57610002565b6002805460a060020a60ff021973ffffffffffffffffffffffffffffffffffffffff1990911633171660a060020a1790557fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc881826060a15050565b60025460019060a060020a900460ff16811461025257610002565b60025460008054600160a060020a0390921691606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf79250a150565b60025460019060a060020a900460ff1681146102f057610002565b6002805460008054600160a060020a0390921692909102606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf79250a15056")

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		b.Fatal(err)
	}

	cpurchase, err := abi.Pack("confirmPurchase")
	if err != nil {
		b.Fatal(err)
	}
	creceived, err := abi.Pack("confirmReceived")
	if err != nil {
		b.Fatal(err)
	}
	refund, err := abi.Pack("refund")
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := 0; j < 400; j++ {
			Execute(code, cpurchase, nil)
			Execute(code, creceived, nil)
			Execute(code, refund, nil)
		}
	}
}

func benchmarkKVM_Create(bench *testing.B, code string) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	var (
		sender   = common.BytesToAddress([]byte("sender"))
		receiver = common.BytesToAddress([]byte("receiver"))
	)

	state.CreateAccount(sender)
	state.SetCode(receiver, common.FromHex(code))
	runtimeConfig := Config{
		Origin:   sender,
		State:    state,
		GasLimit: 10000000,
		Time:     new(big.Int).SetUint64(0),
		Coinbase: common.Address{},
	}
	// Warm up the intpools and stuff
	bench.ResetTimer()
	for i := 0; i < bench.N; i++ {
		Call(receiver, []byte{}, &runtimeConfig)
	}
	bench.StopTimer()
}

func BenchmarkKVM_CREATE_500(bench *testing.B) {
	// initcode size 500K, repeatedly calls CREATE and then modifies the mem contents
	benchmarkKVM_Create(bench, "5b6207a120600080f0600152600056")
}
func BenchmarkKVM_CREATE2_500(bench *testing.B) {
	// initcode size 500K, repeatedly calls CREATE2 and then modifies the mem contents
	benchmarkKVM_Create(bench, "5b586207a120600080f5600152600056")
}
func BenchmarkKVM_CREATE_1200(bench *testing.B) {
	// initcode size 1200K, repeatedly calls CREATE and then modifies the mem contents
	benchmarkKVM_Create(bench, "5b62124f80600080f0600152600056")
}
func BenchmarkKVM_CREATE2_1200(bench *testing.B) {
	// initcode size 1200K, repeatedly calls CREATE2 and then modifies the mem contents
	benchmarkKVM_Create(bench, "5b5862124f80600080f5600152600056")
}

// benchmarkNonModifyingCode benchmarks code, but if the code modifies the
// state, this should not be used, since it does not reset the state between runs.
func benchmarkNonModifyingCode(gas uint64, code []byte, name string, b *testing.B) {
	cfg := new(Config)
	setDefaults(cfg)
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	cfg.State = state
	cfg.GasLimit = gas
	var (
		destination = common.BytesToAddress([]byte("contract"))
		kvmenv      = NewEnv(cfg)
		sender      = kvm.AccountRef(cfg.Origin)
	)
	state.CreateAccount(destination)
	eoa := common.HexToAddress("E0")
	{
		state.CreateAccount(eoa)
		state.SetNonce(eoa, 100)
	}
	reverting := common.HexToAddress("EE")
	{
		state.CreateAccount(reverting)
		state.SetCode(reverting, []byte{
			byte(kvm.PUSH1), 0x00,
			byte(kvm.PUSH1), 0x00,
			byte(kvm.REVERT),
		})
	}

	// state.CreateAccount(cfg.Origin)
	// set the receiver's (the executing contract) code for execution.
	state.SetCode(destination, code)
	kvmenv.Call(sender, destination, nil, gas, cfg.Value)

	b.Run(name, func(b *testing.B) {
		b.ReportAllocs()
		for i := 0; i < b.N; i++ {
			kvmenv.Call(sender, destination, nil, gas, cfg.Value)
		}
	})
}

// BenchmarkSimpleLoop test a pretty simple loop which loops until OOG
// 55 ms
func BenchmarkSimpleLoop(b *testing.B) {

	staticCallIdentity := []byte{
		byte(kvm.JUMPDEST), //  [ count ]
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),       // out offset
		byte(kvm.DUP1),       // out insize
		byte(kvm.DUP1),       // in offset
		byte(kvm.PUSH1), 0x4, // address of identity
		byte(kvm.GAS), // gas
		byte(kvm.STATICCALL),
		byte(kvm.POP),      // pop return value
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	callIdentity := []byte{
		byte(kvm.JUMPDEST), //  [ count ]
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),       // out offset
		byte(kvm.DUP1),       // out insize
		byte(kvm.DUP1),       // in offset
		byte(kvm.DUP1),       // value
		byte(kvm.PUSH1), 0x4, // address of identity
		byte(kvm.GAS), // gas
		byte(kvm.CALL),
		byte(kvm.POP),      // pop return value
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	callInexistant := []byte{
		byte(kvm.JUMPDEST), //  [ count ]
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),        // out offset
		byte(kvm.DUP1),        // out insize
		byte(kvm.DUP1),        // in offset
		byte(kvm.DUP1),        // value
		byte(kvm.PUSH1), 0xff, // address of existing contract
		byte(kvm.GAS), // gas
		byte(kvm.CALL),
		byte(kvm.POP),      // pop return value
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	callEOA := []byte{
		byte(kvm.JUMPDEST), //  [ count ]
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),        // out offset
		byte(kvm.DUP1),        // out insize
		byte(kvm.DUP1),        // in offset
		byte(kvm.DUP1),        // value
		byte(kvm.PUSH1), 0xE0, // address of EOA
		byte(kvm.GAS), // gas
		byte(kvm.CALL),
		byte(kvm.POP),      // pop return value
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	loopingCode := []byte{
		byte(kvm.JUMPDEST), //  [ count ]
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),       // out offset
		byte(kvm.DUP1),       // out insize
		byte(kvm.DUP1),       // in offset
		byte(kvm.PUSH1), 0x4, // address of identity
		byte(kvm.GAS), // gas

		byte(kvm.POP), byte(kvm.POP), byte(kvm.POP), byte(kvm.POP), byte(kvm.POP), byte(kvm.POP),
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	calllRevertingContractWithInput := []byte{
		byte(kvm.JUMPDEST), //
		// push args for the call
		byte(kvm.PUSH1), 0, // out size
		byte(kvm.DUP1),        // out offset
		byte(kvm.PUSH1), 0x20, // in size
		byte(kvm.PUSH1), 0x00, // in offset
		byte(kvm.PUSH1), 0x00, // value
		byte(kvm.PUSH1), 0xEE, // address of reverting contract
		byte(kvm.GAS), // gas
		byte(kvm.CALL),
		byte(kvm.POP),      // pop return value
		byte(kvm.PUSH1), 0, // jumpdestination
		byte(kvm.JUMP),
	}

	benchmarkNonModifyingCode(100000000, staticCallIdentity, "staticcall-identity-100M", b)
	benchmarkNonModifyingCode(100000000, callIdentity, "call-identity-100M", b)
	benchmarkNonModifyingCode(100000000, loopingCode, "loop-100M", b)
	benchmarkNonModifyingCode(100000000, callInexistant, "call-nonexist-100M", b)
	benchmarkNonModifyingCode(100000000, callEOA, "call-EOA-100M", b)
	benchmarkNonModifyingCode(100000000, calllRevertingContractWithInput, "call-reverting-100M", b)
}
