/*
 *  Copyright 2018 KardiaChain
 *  This file is part of the go-kardia library.
 *
 *  The go-kardia library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The go-kardia library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with the go-kardia library. If not, see <http://www.gnu.org/licenses/>.
 */

package kvm

import (
	"math/big"
	"strings"
	"testing"

	"github.com/kardiachain/go-kardia/kai/kaidb/memorydb"
	"github.com/kardiachain/go-kardia/kai/state"
	"github.com/kardiachain/go-kardia/kvm/sample_kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
)

// Runtime_bytecode for ./Permission.sol
var permission_smc_code = common.Hex2Bytes("")
var permission_smc_definition = `[
	{
	    "constant": true,
	    "inputs": [
	        {
	            "name": "_pubkey",
	            "type": "string"
	        },
	        {
	            "name": "_nodeType",
	            "type": "uint256"
	        }
        ],
	    "name": "isValidNode",
	    "outputs": [
	        {
	            "name": "",
	            "type": "uint256"
	        }
        ],
        "payable": false,
        "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [
	        {
	            "name": "_pubkey",
	            "type": "string"
	        }
        ],
        "name": "isValidator",
        "outputs": [
            {
                "name": "",
	            "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
	},
    {
        "constant": true,
        "inputs": [
            {
                "name": "_pubkey",
                "type": "string"
            }
        ],
        "name": "getNodeInfo",
        "outputs": [
            {
                "name": "addr",
	            "type": "address"
            },
            {
                "name": "votingPower",
                "type": "uint256"
            },
            {
                "name": "nodeType",
                "type": "uint256"
            }, 
            {
                "name": "listenAddress",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
	{
	    "constant": false,
	    "inputs": [
	        {
	            "name": "_pubkey",
	            "type": "string"
	        },
	        {
	            "name": "_addr",
	            "type": "address"
	        },
	        {
	            "name": "_nodeType",
	            "type": "uint256"
	        },
	        {
	            "name": "_votingPower",
	            "type": "uint256"
	        },
	        {
	            "name": "listenAddress",
	            "type": "string"
	        }
        ],
        "name": "addNode",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
	    "payable": false,
	    "stateMutability": "nonpayable",
	    "type": "function"
	},
	{
	    "constant": false,
	    "inputs": [
	        {
	            "name": "_pubkey",
	            "type": "string"
	        }
        ],
        "name": "removeNode",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [
	        {"name": "index",
	        "type": "uint256"}
        ],
        "name": "getInitialNodeByIndex",
        "outputs": [
            {
                "name": "publickey",
                "type": "string"
            },
            {
                "name": "addr",
                "type": "address"
            },
            {
                "name": "listenAddr",
                "type": "string"
            },
            {
                "name": "votingPower",
                "type": "uint256"
            },
            {
                "name": "nodeType",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
	}
]`

func TestExecutePermissionContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(memorydb.New()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, permission_smc_code)
	abi, err := abi.JSON(strings.NewReader(permission_smc_definition))
	if err != nil {
		t.Fatal(err)
	}

	addNodeInput, err := abi.Pack("addNode", "abcdefxyz",
		common.HexToAddress("0x00009"), big.NewInt(2), big.NewInt(0), "[::]:3009")
	// Add node from non-owner account, should return error
	addNodeResult, _, err := sample_kvm.Call(address, addNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xaa")})
	if err == nil {
		t.Error("Added from non owner, expect error but nil returned")
	}
	// Add node from owner account
	addNodeResult, _, err = sample_kvm.Call(address, addNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	if err != nil {
		t.Fatal(err)
	}
	result := big.NewInt(0).SetBytes(addNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect add node from owner returns 1, got", result.String())
	}
	// Verify newly added node type
	getNodeInput, err := abi.Pack("getNodeInfo", "abcdefxyz")
	if err != nil {
		t.Fatal(err)
	}
	getNodeResult, _, err := sample_kvm.Call(address, getNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	var nodeInfo struct {
		Addr          common.Address
		VotingPower   *big.Int
		NodeType      *big.Int
		ListenAddress string
	}

	err = abi.UnpackIntoInterface(&nodeInfo, "getNodeInfo", getNodeResult)
	if err != nil {
		t.Fatal(err)
	}
	if nodeInfo.Addr != common.HexToAddress("0x00009") {
		t.Error("Expect address 0x00009, got", nodeInfo.Addr.String())
	}
	if nodeInfo.VotingPower.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect voting power 0, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.NodeType.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect node type 2, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.ListenAddress != "[::]:3009" {
		t.Error("Expect node listen address [::]:3009, got", nodeInfo.ListenAddress)
	}
	// Test if newly added node is valid
	getValidNodeInput, err := abi.Pack("isValidNode", "abcdefxyz",
		big.NewInt(2))
	if err != nil {
		t.Fatal(err)
	}
	getValidNodeResult, _, err := sample_kvm.Call(address, getValidNodeInput, &sample_kvm.Config{State: state})
	result = big.NewInt(0).SetBytes(getValidNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidNode return 1, got", result.String())
	}

	// Test if an arbitrary node is valid
	getValidNodeInput, err = abi.Pack("isValidNode", "abcxyz",
		big.NewInt(2))
	if err != nil {
		t.Fatal(err)
	}
	getValidNodeResult, _, err = sample_kvm.Call(address, getValidNodeInput, &sample_kvm.Config{State: state})
	result = big.NewInt(0).SetBytes(getValidNodeResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect isValidNode return 0, got", result.String())
	}

	// Test if initial validator is correct
	getValidatorInput, err := abi.Pack("isValidator", "7a86e2b7628c76fcae76a8b37025cba698a289a44102c5c021594b5c9fce33072ee7ef992f5e018dc44b98fa11fec53824d79015747e8ac474f4ee15b7fbe860")
	getValidatorResult, _, err := sample_kvm.Call(address, getValidatorInput, &sample_kvm.Config{State: state})
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidator return 1, got", result.String())
	}

	// Test if arbitrary key is regconized as initial validator
	getValidatorInput, err = abi.Pack("isValidator", "arbitrarypubkey")
	getValidatorResult, _, err = sample_kvm.Call(address, getValidatorInput, &sample_kvm.Config{State: state})
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect isValidator return 0, got", result.String())
	}

	// Test remove node with non-owner user
	removeNodeInput, err := abi.Pack("removeNode", "abcdefxyz", big.NewInt(2))
	// remove node sample_kvm.Called by non-owner user, should return error
	_, _, err = sample_kvm.Call(address, removeNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xaa")})
	if err == nil {
		t.Error("Remove from non owner, expect error but nil returned")
	}

	// Test remove with owner user, remove an initial node, should return error
	removeNodeInput, err = abi.Pack("removeNode", "7a86e2b7628c76fcae76a8b37025cba698a289a44102c5c021594b5c9fce33072ee7ef992f5e018dc44b98fa11fec53824d79015747e8ac474f4ee15b7fbe860")
	removeResult, _, err := sample_kvm.Call(address, removeNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	result = big.NewInt(0).SetBytes(removeResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Remove initial account should return 0 but got", result.String())
	}

	// Remove newly added node with owner user, should success
	removeNodeInput, err = abi.Pack("removeNode", "abcdefxyz")
	removeResult, _, err = sample_kvm.Call(address, removeNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	result = big.NewInt(0).SetBytes(removeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Remove newly added account should return 1 but got", result.String())
	}

	// Get NodeInfo of removed node
	getNodeResult, _, err = sample_kvm.Call(address, getNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	err = abi.UnpackIntoInterface(&nodeInfo, "getNodeInfo", getNodeResult)
	if err != nil {
		t.Fatal(err)
	}
	if nodeInfo.Addr != common.HexToAddress("0x") {
		t.Error("Expect address 0x, got", nodeInfo.Addr.String())
	}
	if nodeInfo.VotingPower.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect voting power 0, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.NodeType.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect node type 0, got", nodeInfo.VotingPower.String())
	}

	if nodeInfo.ListenAddress != "" {
		t.Error("Expect node listen address empty, got", nodeInfo.ListenAddress)
	}

	// Add new validator from owner account
	addNodeInput, err = abi.Pack("addNode", "abcdefxyz",
		common.HexToAddress("0x00009"), big.NewInt(1), big.NewInt(100), "[::]:3009")
	addNodeResult, _, err = sample_kvm.Call(address, addNodeInput, &sample_kvm.Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	if err != nil {
		t.Fatal(err)
	}
	result = big.NewInt(0).SetBytes(addNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect add node from owner returns 1, got", result.String())
	}

	// Test if newly added node is validator
	getValidatorInput, err = abi.Pack("isValidator", "abcdefxyz")
	getValidatorResult, _, err = sample_kvm.Call(address, getValidatorInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidator return 1, got", result.String())
	}

	// Test get 1 initial node info
	getInitialNodeInput, err := abi.Pack("getInitialNodeByIndex", big.NewInt(0))
	if err != nil {
		t.Fatal(err)
	}
	getInitialNodeResult, _, err := sample_kvm.Call(address, getInitialNodeInput, &sample_kvm.Config{State: state})
	var initialNodeInfo struct {
		Publickey   string
		Addr        common.Address
		ListenAddr  string
		VotingPower *big.Int
		NodeType    *big.Int
	}
	err = abi.UnpackIntoInterface(&initialNodeInfo, "getInitialNodeByIndex", getInitialNodeResult)
	if err != nil {
		t.Fatal(err)
	}
	if initialNodeInfo.Publickey != "7a86e2b7628c76fcae76a8b37025cba698a289a44102c5c021594b5c9fce33072ee7ef992f5e018dc44b98fa11fec53824d79015747e8ac474f4ee15b7fbe860" {
		t.Error("Invalid pubkey:", initialNodeInfo.Publickey)
	}
	if initialNodeInfo.Addr.String() != "0xc1fe56E3F58D3244F606306611a5d10c8333f1f6" {
		t.Error("Invalid addres, expect 0xc1fe56E3F58D3244F606306611a5d10c8333f1f6, got ", initialNodeInfo.Addr.String())
	}
	if initialNodeInfo.ListenAddr != "[::]:3000" {
		t.Error("Invalid listen address, expect [::]:3000, got", initialNodeInfo.ListenAddr)
	}
	if big.NewInt(100).Cmp(initialNodeInfo.VotingPower) != 0 {
		t.Error("Invalid voting power, expect 100, got ", initialNodeInfo.VotingPower.String())
	}
	if big.NewInt(1).Cmp(initialNodeInfo.NodeType) != 0 {
		t.Error("Invalid node type, expect 0, got ", initialNodeInfo.NodeType.String())
	}
}
