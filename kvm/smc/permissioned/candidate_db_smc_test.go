/*
 *  Copyright 2018 KardiaChain
 *  This file is part of the go-kardia library.
 *
 *  The go-kardia library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The go-kardia library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with the go-kardia library. If not, see <http://www.gnu.org/licenses/>.
 */

package kvm

import (
	"github.com/kardiachain/go-kardiamain/mainchain/tx_pool"
	"math"
	"strings"
	"testing"

	"encoding/hex"
	"github.com/kardiachain/go-kardiamain/kai/base"
	"github.com/kardiachain/go-kardiamain/kai/state"
	"github.com/kardiachain/go-kardiamain/kvm"
	"github.com/kardiachain/go-kardiamain/kvm/sample_kvm"
	"github.com/kardiachain/go-kardiamain/lib/abi"
	"github.com/kardiachain/go-kardiamain/lib/common"
	"github.com/kardiachain/go-kardiamain/lib/crypto"
	"github.com/kardiachain/go-kardiamain/lib/log"
	"github.com/kardiachain/go-kardiamain/mainchain/blockchain"
	"github.com/kardiachain/go-kardiamain/mainchain/genesis"
	"github.com/kardiachain/go-kardiamain/tool"
	"github.com/kardiachain/go-kardiamain/types"
	"math/big"
	"time"
)

var code = common.Hex2Bytes("60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063126d89ff146100935780631a83260c1461012357806332955d7014610218578063536bbec3146103315780638813ce1214610459578063b9da4af8146104e9578063cc5ef00914610598578063f406872214610628575b600080fd5b34801561009f57600080fd5b506100a861071d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100e85780820151818401526020810190506100cd565b50505050905090810190601f1680156101155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012f57600080fd5b50610216600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bac565b005b34801561022457600080fd5b5061031560048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610d27565b604051808260ff1660ff16815260200191505060405180910390f35b34801561033d57600080fd5b506103de600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061136d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561041e578082015181840152602081019050610403565b50505050905090810190601f16801561044b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046557600080fd5b5061046e61180f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ae578082015181840152602081019050610493565b50505050905090810190601f1680156104db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104f557600080fd5b50610596600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c9e565b005b3480156105a457600080fd5b506105ad611dab565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ed5780820151818401526020810190506105d2565b50505050905090810190601f16801561061a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561063457600080fd5b5061071b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612230565b005b60608060008060008054905014156107475760206040519081016040528060008152509250610ba7565b60206040519081016040528060008152509150600090505b600080549050811015610ba3576001151560008281548110151561077f57fe5b906000526020600020906006020160030160009054906101000a900460ff1615151415610b96576040516020018060000190506040516020818303038152906040526040518082805190602001908083835b6020831015156107f657805182526020820191506020810190506020830392506107d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040516020018082805190602001908083835b602083101515610860578051825260208201915060208101905060208303925061083b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156108c957805182526020820191506020810190506020830392506108a4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561094357610940826040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061231d565b91505b610b9382610b8e60008481548110151561095957fe5b906000526020600020906006020160c06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a0c5780601f106109e157610100808354040283529160200191610a0c565b820191906000526020600020905b8154815290600101906020018083116109ef57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610aae5780601f10610a8357610100808354040283529160200191610aae565b820191906000526020600020905b815481529060010190602001808311610a9157829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b505050505081526020016003820160009054906101000a900460ff1615151515815260200160048201548152602001600582015481525050846123e9565b61231d565b91505b808060010191505061075f565b8192505b505090565b7fe2df4c83eef1ab3c88f888395f79598f4f2b295eb4701a77c0278a2027392b3f83838360405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610c18578082015181840152602081019050610bfd565b50505050905090810190601f168015610c455780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610c7e578082015181840152602081019050610c63565b50505050905090810190601f168015610cab5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015610ce4578082015181840152602081019050610cc9565b50505050905090810190601f168015610d115780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b6000836040516020018082805190602001908083835b602083101515610d625780518252602082019150602081019050602083039250610d3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610dcb5780518252602082019150602081019050602083039250610da6565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600086815481101515610e0b57fe5b90600052602060002090600602016000016040516020018082805460018160011615610100020316600290048015610e7a5780601f10610e58576101008083540402835291820191610e7a565b820191906000526020600020905b815481529060010190602001808311610e66575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515610ec35780518252602082019150602081019050602083039250610e9e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610f045760009050611365565b600085815481101515610f1357fe5b906000526020600020906006020160030160009054906101000a900460ff1615610f405760009050611365565b816040516020018082805190602001908083835b602083101515610f795780518252602082019150602081019050602083039250610f54565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610fe25780518252602082019150602081019050602083039250610fbd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008681548110151561102257fe5b906000526020600020906006020160010160405160200180828054600181600116156101000203166002900480156110915780601f1061106f576101008083540402835291820191611091565b820191906000526020600020905b81548152906001019060200180831161107d575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156110da57805182526020820191506020810190506020830392506110b5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561111b5760009050611365565b600160008681548110151561112c57fe5b906000526020600020906006020160030160006101000a81548160ff0219169083151502179055508260008681548110151561116457fe5b90600052602060002090600602016002019080519060200190611188929190612cf3565b504360008681548110151561119957fe5b9060005260206000209060060201600501819055507f8621b9013be815a7c03fe9292e5009d853e9bfc6985fb0415eb3d92cde37f19a84846000888154811015156111e057fe5b906000526020600020906006020160010160405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561123957808201518184015260208101905061121e565b50505050905090810190601f1680156112665780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561129f578082015181840152602081019050611284565b50505050905090810190601f1680156112cc5780820380516001836020036101000a031916815260200191505b5084810382528581815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561134e5780601f106113235761010080835404028352916020019161134e565b820191906000526020600020905b81548152906001019060200180831161133157829003601f168201915b5050965050505050505060405180910390a1600190505b949350505050565b606060008090505b6001805490508110156117f457836040516020018082805190602001908083835b6020831015156113bb5780518252602082019150602081019050602083039250611396565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561142457805182526020820191506020810190506020830392506113ff565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018281548110151561146457fe5b906000526020600020906005020160000160405160200180828054600181600116156101000203166002900480156114d35780601f106114b15761010080835404028352918201916114d3565b820191906000526020600020905b8154815290600101906020018083116114bf575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561151c57805182526020820191506020810190506020830392506114f7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161480156117225750826040516020018082805190602001908083835b60208310151561158e5780518252602082019150602081019050602083039250611569565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156115f757805182526020820191506020810190506020830392506115d2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018281548110151561163757fe5b906000526020600020906005020160010160405160200180828054600181600116156101000203166002900480156116a65780601f106116845761010080835404028352918201916116a6565b820191906000526020600020905b815481529060010190602001808311611692575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156116ef57805182526020820191506020810190506020830392506116ca565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b156117e75760018181548110151561173657fe5b90600052602060002090600502016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117db5780601f106117b0576101008083540402835291602001916117db565b820191906000526020600020905b8154815290600101906020018083116117be57829003601f168201915b50505050509150611808565b8080600101915050611375565b602060405190810160405280600081525091505b5092915050565b60608060008060008054905014156118395760206040519081016040528060008152509250611c99565b60206040519081016040528060008152509150600090505b600080549050811015611c95576040516020018060000190506040516020818303038152906040526040518082805190602001908083835b6020831015156118ae5780518252602082019150602081019050602083039250611889565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040516020018082805190602001908083835b60208310151561191857805182526020820191506020810190506020830392506118f3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611981578051825260208201915060208101905060208303925061195c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156119fb576119f8826040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061231d565b91505b60001515600082815481101515611a0e57fe5b906000526020600020906006020160030160009054906101000a900460ff1615151415611c8857611c8582611c80600084815481101515611a4b57fe5b906000526020600020906006020160c06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611afe5780601f10611ad357610100808354040283529160200191611afe565b820191906000526020600020905b815481529060010190602001808311611ae157829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ba05780601f10611b7557610100808354040283529160200191611ba0565b820191906000526020600020905b815481529060010190602001808311611b8357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c425780601f10611c1757610100808354040283529160200191611c42565b820191906000526020600020905b815481529060010190602001808311611c2557829003601f168201915b505050505081526020016003820160009054906101000a900460ff1615151515815260200160048201548152602001600582015481525050846123e9565b61231d565b91505b8080600101915050611851565b8192505b505090565b611ca6612d73565b60c0604051908101604052808481526020018381526020016020604051908101604052806000815250815260200160001515815260200143815260200160008152509050600081908060018154018082558091505090600182039060005260206000209060060201600090919290919091506000820151816000019080519060200190611d34929190612dac565b506020820151816001019080519060200190611d51929190612dac565b506040820151816002019080519060200190611d6e929190612dac565b5060608201518160030160006101000a81548160ff0219169083151502179055506080820151816004015560a08201518160050155505050505050565b6060806000806001805490501415611dd5576020604051908101604052806000815250925061222b565b60206040519081016040528060008152509150600090505b600180549050811015612227576040516020018060000190506040516020818303038152906040526040518082805190602001908083835b602083101515611e4a5780518252602082019150602081019050602083039250611e25565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040516020018082805190602001908083835b602083101515611eb45780518252602082019150602081019050602083039250611e8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611f1d5780518252602082019150602081019050602083039250611ef8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611f9757611f94826040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061231d565b91505b60011515600182815481101515611faa57fe5b906000526020600020906005020160030160009054906101000a900460ff161515141561221a5761221782612212600184815481101515611fe757fe5b906000526020600020906005020160a06040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561209a5780601f1061206f5761010080835404028352916020019161209a565b820191906000526020600020905b81548152906001019060200180831161207d57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561213c5780601f106121115761010080835404028352916020019161213c565b820191906000526020600020905b81548152906001019060200180831161211f57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121de5780601f106121b3576101008083540402835291602001916121de565b820191906000526020600020905b8154815290600101906020018083116121c157829003601f168201915b505050505081526020016003820160009054906101000a900460ff161515151581526020016004820154815250508461290c565b61231d565b91505b8080600101915050611ded565b8192505b505090565b612238612e2c565b60a0604051908101604052808581526020018481526020018381526020016001151581526020014381525090506001819080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000190805190602001906122af929190612dac565b5060208201518160010190805190602001906122cc929190612dac565b5060408201518160020190805190602001906122e9929190612dac565b5060608201518160030160006101000a81548160ff0219169083151502179055506080820151816004015550505050505050565b606082826040516020018083805190602001908083835b6020831015156123595780518252602082019150602081019050602083039250612334565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156123ac5780518252602082019150602081019050602083039250612387565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6060806123f583612b9c565b905083606001511561270a578084600001518560200151866040015161241e8860800151612b9c565b61242b8960a00151612b9c565b6040516020018087805190602001908083835b602083101515612463578051825260208201915060208101905060208303925061243e565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010186805190602001908083835b6020831015156124de57805182526020820191506020810190506020830392506124b9565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b6020831015156125595780518252602082019150602081019050602083039250612534565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b6020831015156125d457805182526020820191506020810190506020830392506125af565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310151561264f578051825260208201915060208101905060208303925061262a565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831015156126ca57805182526020820191506020810190506020830392506126a5565b6001836020036101000a03801982511681845116808217855250505050505090500196505050505050506040516020818303038152906040529150612905565b80846000015185602001516127228760800151612b9c565b6040516020018085805190602001908083835b60208310151561275a5780518252602082019150602081019050602083039250612735565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b6020831015156127d557805182526020820191506020810190506020830392506127b0565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b602083101515612850578051825260208201915060208101905060208303925061282b565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831015156128cb57805182526020820191506020810190506020830392506128a6565b6001836020036101000a03801982511681845116808217855250505050505090500194505050505060405160208183030381529060405291505b5092915050565b60608061291883612b9c565b9050808460000151856020015186604001516129378860800151612b9c565b6040516020018086805190602001908083835b60208310151561296f578051825260208201915060208101905060208303925061294a565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b6020831015156129ea57805182526020820191506020810190506020830392506129c5565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083101515612a655780518252602082019150602081019050602083039250612a40565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b602083101515612ae05780518252602082019150602081019050602083039250612abb565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083101515612b5b5780518252602082019150602081019050602083039250612b36565b6001836020036101000a0380198251168184511680821785525050505050509050019550505050505060405160208183030381529060405291505092915050565b60606000806060600080861415612bea576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450612cea565b8593505b600084141515612c14578280600101935050600a84811515612c0c57fe5b049350612bee565b826040519080825280601f01601f191660200182016040528015612c475781602001602082028038833980820191505090505b5091506001830390505b600086141515612ce657600a86811515612c6757fe5b066030017f010000000000000000000000000000000000000000000000000000000000000002828280600190039350815181101515612ca257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515612cde57fe5b049550612c51565b8194505b50505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d3457805160ff1916838001178555612d62565b82800160010185558215612d62579182015b82811115612d61578251825591602001919060010190612d46565b5b509050612d6f9190612e5e565b5090565b60c06040519081016040528060608152602001606081526020016060815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ded57805160ff1916838001178555612e1b565b82800160010185558215612e1b579182015b82811115612e1a578251825591602001919060010190612dff565b5b509050612e289190612e5e565b5090565b60a060405190810160405280606081526020016060815260200160608152602001600015158152602001600081525090565b612e8091905b80821115612e7c576000816000905550600101612e64565b5090565b905600a165627a7a72305820e1c4d65e1920e9ecdbd117be10475145dbc886cbdac679dc7567918b26201a890029")

var definition = `[
	{
		"constant": true,
		"inputs": [],
		"name": "getCompletedRequests",
		"outputs": [
			{
				"name": "requestList",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_fromOrgId",
				"type": "string"
			},
			{
				"name": "_content",
				"type": "string"
			}
		],
		"name": "addExternalResponse",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "email",
				"type": "string"
			},
			{
				"name": "fromOrgId",
				"type": "string"
			}
		],
		"name": "addRequest",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_requestID",
				"type": "uint256"
			},
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_content",
				"type": "string"
			},
			{
				"name": "_toOrgId",
				"type": "string"
			}
		],
		"name": "completeRequest",
		"outputs": [
			{
				"name": "",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_fromOrgId",
				"type": "string"
			},
			{
				"name": "_toOrgId",
				"type": "string"
			}
		],
		"name": "requestCandidateInfo",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "email",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "fromOrgId",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "toOrgId",
				"type": "string"
			}
		],
		"name": "ExternalCandidateInfoRequested",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "email",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "answer",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "toOrgId",
				"type": "string"
			}
		],
		"name": "RequestCompleted",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_fromOrgId",
				"type": "string"
			}
		],
		"name": "getExternalResponse",
		"outputs": [
			{
				"name": "content",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getRequests",
		"outputs": [
			{
				"name": "requestList",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getResponses",
		"outputs": [
			{
				"name": "requestList",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]`

// For contract of all tests in this file, please find the solidity source code at go-kardia/kvm/smc/permissioned/CandidateDB.sol

// Util function to setup abi for contract
func SetupContractAbi() (*state.StateDB, common.Address, *abi.ABI, error) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(types.NewMemStore()))

	address := common.HexToAddress("0x0a")

	//var code = common.Hex2Bytes("")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		return nil, common.Address{}, nil, err
	}
	return state, address, &abi, nil
}

// ApplyTransactionReturnLog applies an tx to a blockchain and returns all the logs generated from that tx
func ApplyTransactionReturnLog(bc base.BaseBlockChain, statedb *state.StateDB, tx *types.Transaction) ([]*types.Log, error) {
	var (
		usedGas = new(uint64)
		header  = &types.Header{Time: big.NewInt(time.Now().Unix()), GasLimit: 10000000}
		gp      = new(types.GasPool).AddGas(10000000)
		logger  = log.New()
	)
	statedb.Prepare(tx.Hash(), common.Hash{}, 1)
	receipt, _, err := blockchain.ApplyTransaction(logger, bc, gp, statedb, header, tx, usedGas, kvm.Config{})

	if err != nil {
		return nil, err
	}
	return receipt.Logs, nil
}

func SetupBlockchainForTesting() (*blockchain.BlockChain, *tx_pool.TxPool, error) {
	kaiDb := types.NewMemStore()
	initValue := genesis.ToCell(int64(math.Pow10(6)))

	var genesisAccounts = map[string]*big.Int{
		"0xc1fe56E3F58D3244F606306611a5d10c8333f1f6": initValue,
		"0xBA30505351c17F4c818d94a990eDeD95e166474b": initValue,
	}
	address := common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")
	privateKey, _ := crypto.HexToECDSA("8843ebcb1021b00ae9a644db6617f9c6d870e5fd53624cefe374c1d2d710fd06")
	g := genesis.DefaulTestnetFullGenesisBlock(genesisAccounts, map[string]string{})
	chainConfig, _, genesisErr := genesis.SetupGenesisBlock(log.New(), kaiDb, g, &types.BaseAccount{
		Address:    address,
		PrivateKey: *privateKey,
	})
	if genesisErr != nil {
		return nil, nil, genesisErr
	}

	bc, err := blockchain.NewBlockChain(log.New(), kaiDb, chainConfig, true)
	
	txPoolConfig := tx_pool.TxPoolConfig{
		GlobalSlots:     60,
		GlobalQueue:     5120000,
		NumberOfWorkers: 3,
		WorkerCap:       512,
		BlockSize:       7192,
	}

	txPool := tx_pool.NewTxPool(log.New(), txPoolConfig, nil, bc)
	
	return bc, txPool, err
}

// TestEmitEvent tests if contract emits correct event and data when there is tx requested external candidate data
func TestEmitEvent(t *testing.T) {
	// Setup blockchain for testing
	bc, txPool, err := SetupBlockchainForTesting()
	if err != nil {
		t.Fatal(err)
	}
	statedb, err := bc.State()
	if err != nil {
		t.Fatal(err)
	}
	// Setup contract code into newly generated state
	address := common.HexToAddress("0x0a")
	statedb.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	// Create tx to request candidate info from external chain
	requestCandidateInfoInput, err := abi.Pack("requestCandidateInfo", "a@gmail.com", "org1", "org2")
	if err != nil {
		t.Fatal(err)
	}
	addrKeyBytes, _ := hex.DecodeString("8843ebcb1021b00ae9a644db6617f9c6d870e5fd53624cefe374c1d2d710fd06")
	addrKey := crypto.ToECDSAUnsafe(addrKeyBytes)
	tx := tool.GenerateSmcCall(addrKey, address, requestCandidateInfoInput, txPool, false)
	// Apply tx and get returned logs from that tx
	logs, err := ApplyTransactionReturnLog(bc, statedb, tx)
	if err != nil {
		t.Fatal(err)
	}
	// Check if there is event emitted from previous tx
	if len(logs) == 0 {
		t.Error("Expect length of log > 0, 0 is returned")
	}
	type ExternalCandidateInfoRequested struct {
		Email     string
		FromOrgId string
		ToOrgId   string
	}
	var requestEvent ExternalCandidateInfoRequested
	err = abi.Unpack(&requestEvent, "ExternalCandidateInfoRequested", logs[0].Data)
	if err != nil {
		t.Fatal(err)
	}
	// Check if event data is emitted correctly
	if requestEvent.Email != "a@gmail.com" {
		t.Error("Expect request info for a@gmail.com, got ", requestEvent.Email)
	}
	if requestEvent.FromOrgId != "org1" {
		t.Error("Expect FromOrgId is Org1, get ", requestEvent.FromOrgId)
	}
	if requestEvent.ToOrgId != "org2" {
		t.Error("Expect ToOrgId is Org2, get ", requestEvent.ToOrgId)
	}
}

// TestInfoRequest tests all function related to candidate info request including get list, add and complete request
func TestInfoRequest(t *testing.T) {
	// Setup blockchain for testing
	bc, txPool, err := SetupBlockchainForTesting()
	if err != nil {
		t.Fatal(err)
	}
	statedb, err := bc.State()
	if err != nil {
		t.Fatal(err)
	}
	// Setup contract code into newly generated state
	address := common.HexToAddress("0x0a")
	statedb.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRequestInput, err := abi.Pack("getRequests")
	getRequestResult, _, err := sample_kvm.Call(address, getRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	var list struct {
		RequestList string
	}
	err = abi.Unpack(&list, "getRequests", getRequestResult)
	if err != nil {
		t.Fatal(err)
	}
	if list.RequestList != "" {
		t.Error("Expect empty request list, got ", list.RequestList)
	}
	addRequestInput, err := abi.Pack("addRequest", "a@gmail.com", "org1")
	_, _, err = sample_kvm.Call(address, addRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	addRequestInput, err = abi.Pack("addRequest", "b@gmail.com", "org2")
	_, _, err = sample_kvm.Call(address, addRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	getRequestResult, _, err = sample_kvm.Call(address, getRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&list, "getRequests", getRequestResult)
	if err != nil {
		t.Fatal(err)
	}
	if list.RequestList != "0:a@gmail.com:org1:0,1:b@gmail.com:org2:0" {
		t.Error("Expect 2 requests, got ", list.RequestList)
	}
	completeInput, err := abi.Pack("completeRequest", big.NewInt(0), "a@gmail.com", "content to response", "org1")
	if err != nil {
		t.Fatal(err)
	}

	// Complete above request again, should succeed and emit log this time
	addrKeyBytes, _ := hex.DecodeString("8843ebcb1021b00ae9a644db6617f9c6d870e5fd53624cefe374c1d2d710fd06")
	addrKey := crypto.ToECDSAUnsafe(addrKeyBytes)
	tx := tool.GenerateSmcCall(addrKey, address, completeInput, txPool, false)
	// Apply tx and get returned logs from that tx
	logs, err := ApplyTransactionReturnLog(bc, statedb, tx)
	if err != nil {
		t.Fatal(err)
	}
	// Check if there is event emitted from previous tx
	if len(logs) == 0 {
		t.Error("Expect length of log > 0, 0 is returned")
	}

	var requestCompleted struct {
		Email   string
		Answer  string
		ToOrgId string
	}
	err = abi.Unpack(&requestCompleted, "RequestCompleted", logs[0].Data)
	if err != nil {
		t.Fatal(err)
	}
	if requestCompleted.Email != "a@gmail.com" {
		t.Error("Expect email is a@gmail.com, got ", requestCompleted.Email)
	}
	if requestCompleted.Answer != "content to response" {
		t.Error("Expect answer is `content to response`, got ", requestCompleted.Answer)
	}
	if requestCompleted.ToOrgId != "org1" {
		t.Error("Expect complete request to org1, got ", requestCompleted.ToOrgId)
	}
	// Get request list again, should be 1 item remaining
	getRequestResult, _, err = sample_kvm.Call(address, getRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&list, "getRequests", getRequestResult)
	if err != nil {
		t.Fatal(err)
	}
	if list.RequestList != "1:b@gmail.com:org2:0" {
		t.Error("expect second request remain, got ", list.RequestList)
	}
	// Get list of completed request
	getRequestInput, err = abi.Pack("getCompletedRequests")
	if err != nil {
		t.Fatal(err)
	}
	getRequestResult, _, err = sample_kvm.Call(address, getRequestInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&list, "getCompletedRequests", getRequestResult)
	if err != nil {
		t.Fatal(err)
	}
	if list.RequestList != "0:a@gmail.com:org1:content to response:0:0" {
		t.Error("Expect 2 requests, got ", list.RequestList)
	}

}

func TestGetAddExternalResponse(t *testing.T) {
	bc, _, err := SetupBlockchainForTesting()
	if err != nil {
		t.Fatal(err)
	}
	statedb, err := bc.State()
	if err != nil {
		t.Fatal(err)
	}
	// Setup contract code into newly generated state
	address := common.HexToAddress("0x0a")
	statedb.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	// Get a non-existing response, expect empty
	testGetResponseInput, err := abi.Pack("getExternalResponse", "a@gmail.com", "org1")
	if err != nil {
		t.Fatal(err)
	}
	getResponseResultl, _, err := sample_kvm.Call(address, testGetResponseInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	var externalResult struct {
		Content string
	}
	err = abi.Unpack(&externalResult, "getExternalResponse", getResponseResultl)
	if err != nil {
		t.Fatal(err)
	}
	if externalResult.Content != "" {
		t.Error("Expect empty result, got ", externalResult.Content)
	}
	// Add a response from org1
	testAddResponseInput, err := abi.Pack("addExternalResponse", "a@gmail.com", "org1", "sample response")
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = sample_kvm.Call(address, testAddResponseInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	// get newly added response
	getResponseResultl, _, err = sample_kvm.Call(address, testGetResponseInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&externalResult, "getExternalResponse", getResponseResultl)
	if err != nil {
		t.Fatal(err)
	}
	if externalResult.Content != "sample response" {
		t.Error("Expect empty result, got ", externalResult.Content)
	}

	// Get response for that email but from org 2, should return empty
	testGetResponseInput, _ = abi.Pack("getExternalResponse", "a@gmail.com", "org2")
	getResponseResultl, _, err = sample_kvm.Call(address, testGetResponseInput, &sample_kvm.Config{State: statedb})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&externalResult, "getExternalResponse", getResponseResultl)
	if err != nil {
		t.Fatal(err)
	}
	if externalResult.Content != "" {
		t.Error("Expect empty result, got ", externalResult.Content)
	}
}
